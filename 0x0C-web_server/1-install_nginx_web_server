#!/usr/bin/env bash
# Installs nginx and serves a custom-page in the server

custom_html_file='custom-hello.html'
default_html_file='index.nginx-debian.html'
html_path='/var/www/html'
sites_enabled_path='/etc/nginx/sites-enabled'
sites_available_path='/etc/nginx/sites-available'

apt update
apt install -y nginx;

# assign ownership to the currently logged in user
chown -R "$USER:$USER" /var/www/html

# make sure web root permissions are correct
chown -R 755 /var/www

touch "$html_path/$custom_html_file"

html_content="<!DOCTYPE html>
<html>
	<head></head>
	<body>
		<h1>Hello World!</h1>
	</body>
</html>"

echo "$html_content" > "$html_path/$custom_html_file"

# backup original nginx html file if present
if [[ -f "$html_path/$default_html_file" ]]; then
	mv "$html_path/$default_html_file" "$html_path/$default_html_file".bak
fi

# custom server config
server_block_config="server {
	listen 80 default_server;
	listen [::]:80 default_server;

	root $html_path;
	index $custom_html_file;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files \$uri \$uri/ =404;
	}
}
"

# backup original sites-enabled config if present
if [[ -f "$sites_available_path"/default ]]; then
	mv "$sites_available_path"/default "$sites_available_path"/default.bak
fi

touch "$sites_available_path"/default
echo "$server_block_config" > "$sites_available_path"/default

# delete existing `default` link, and re-construct it
rm "$sites_enabled_path"/default
ln -s "$sites_available_path"/default "$sites_enabled_path"/default

nginx -s reload;
